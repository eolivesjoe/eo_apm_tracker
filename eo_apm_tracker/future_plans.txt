## Features and Enhancements

### 1. Game-Specific Profiles
- Create profiles for different games (e.g., FPS, RTS).
- Customize settings for tracking specific actions (key presses, mouse clicks) and different APM windows (e.g., 30 seconds for fast-paced games, 1 minute for strategy games).

### 2. Graphical User Interface (GUI)
- Implement a real-time overlay using libraries like **Dear ImGui** or **SFML** to display APM stats, including peak, average, and color-coded performance alerts.

### 3. APM Breakdown by Action Type
- Track APM by separating key presses, mouse clicks, and movements.
- Capture mouse movement using `WM_MOUSEMOVE` to provide detailed action breakdowns.

### 4. Long-Term Statistics and Leaderboards
- Store APM sessions in a file (e.g., JSON or SQLite) to track and compare performance across sessions.
- Display leaderboards for the highest APM scores and overall performance improvements.

### 5. Customizable Hotkeys or APM Boost Events
- Allow users to set milestones with visual/audio cues for reaching specific APM thresholds.
- Create "boost modes" that activate flashing effects when achieving high APM.

### 6. Integration with Discord or Game Streaming Tools
- Implement functionality to send APM stats to Discord using bot APIs or overlay APM on Twitch streams for real-time viewer insights.

### 7. Visualization & History
- Build a graphical history of APM performance using libraries like Matplotlib or native C++ charting libraries to visualize fluctuations during gameplay.

### 8. Real-Time Key Mapping Display
- Show a live key map of the most-pressed keys during gameplay (e.g., WASD for FPS, skill hotkeys for MOBA/RTS) to help identify key usage patterns.

### 9. APM Challenges & Rewards
- Gamify the tracker by creating challenges like "maintain APM above 150 for 60 seconds" or "reach peak APM of 300," and reward users with virtual achievements.

### 10. Linux support
- Cross platform support

## Effective APM (EAPM) Implementation in StarCraft: Brood War

### Overview
EAPM (Effective Actions Per Minute) differentiates between meaningful and non-meaningful actions in gameplay. Meaningful actions directly impact the game, while spam actions are excluded.

### Implementation Strategy
1. **Track Actions**: 
   - Record all key presses and mouse clicks, classifying them into categories (e.g., unit selection, building commands, attack commands).

2. **Filter Spam Actions**: 
   - Disregard repeated actions that don’t affect gameplay (e.g., multiple clicks on the same unit without issuing a command).
   - Logic Example: Count only the first selection of a unit as effective if no command is issued afterward.

3. **Assign Action Weights**: 
   - Weight different actions according to their impact (e.g., attack orders and building structures may have higher weights than camera movements or control group toggling).

4. **Calculate EAPM**: 
   - Divide the total number of meaningful actions by the time window to obtain EAPM.
   
   **Formula**:
   \[
   \text{EAPM} = \frac{\text{Effective Actions}}{\text{Time}}
   \]